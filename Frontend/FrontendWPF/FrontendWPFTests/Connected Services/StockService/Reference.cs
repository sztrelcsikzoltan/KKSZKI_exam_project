//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontendWPFTests.StockService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StockService.IStockService")]
    public interface IStockService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddProduct", ReplyAction="http://tempuri.org/IStockService/AddProductResponse")]
        string AddProduct(string uid, string name, string buyUnitPrice, string sellUnitPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddProduct", ReplyAction="http://tempuri.org/IStockService/AddProductResponse")]
        System.Threading.Tasks.Task<string> AddProductAsync(string uid, string name, string buyUnitPrice, string sellUnitPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddSalePurchase", ReplyAction="http://tempuri.org/IStockService/AddSalePurchaseResponse")]
        string AddSalePurchase(string uid, string type, string product, string quantity, string location, string totalPrice, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddSalePurchase", ReplyAction="http://tempuri.org/IStockService/AddSalePurchaseResponse")]
        System.Threading.Tasks.Task<string> AddSalePurchaseAsync(string uid, string type, string product, string quantity, string location, string totalPrice, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddStock", ReplyAction="http://tempuri.org/IStockService/AddStockResponse")]
        string AddStock(string uid, string product, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddStock", ReplyAction="http://tempuri.org/IStockService/AddStockResponse")]
        System.Threading.Tasks.Task<string> AddStockAsync(string uid, string product, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListProduct", ReplyAction="http://tempuri.org/IStockService/ListProductResponse")]
        FrontendWPF.StockService.Response_Product ListProduct(string uid, string id, string name, string buyOver, string buyUnder, string sellOver, string sellUnder, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListProduct", ReplyAction="http://tempuri.org/IStockService/ListProductResponse")]
        System.Threading.Tasks.Task<FrontendWPF.StockService.Response_Product> ListProductAsync(string uid, string id, string name, string buyOver, string buyUnder, string sellOver, string sellUnder, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListSalePurchase", ReplyAction="http://tempuri.org/IStockService/ListSalePurchaseResponse")]
        FrontendWPF.StockService.Response_SalePurchase ListSalePurchase(string uid, string type, string id, string product, string quantityOver, string quantityUnder, string priceOver, string priceUnder, string before, string after, string location, string username, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListSalePurchase", ReplyAction="http://tempuri.org/IStockService/ListSalePurchaseResponse")]
        System.Threading.Tasks.Task<FrontendWPF.StockService.Response_SalePurchase> ListSalePurchaseAsync(string uid, string type, string id, string product, string quantityOver, string quantityUnder, string priceOver, string priceUnder, string before, string after, string location, string username, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListStock", ReplyAction="http://tempuri.org/IStockService/ListStockResponse")]
        FrontendWPF.StockService.Response_Stock ListStock(string uid, string id, string product, string location, string quantityOver, string quantityUnder, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ListStock", ReplyAction="http://tempuri.org/IStockService/ListStockResponse")]
        System.Threading.Tasks.Task<FrontendWPF.StockService.Response_Stock> ListStockAsync(string uid, string id, string product, string location, string quantityOver, string quantityUnder, string limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveProduct", ReplyAction="http://tempuri.org/IStockService/RemoveProductResponse")]
        string RemoveProduct(string uid, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveProduct", ReplyAction="http://tempuri.org/IStockService/RemoveProductResponse")]
        System.Threading.Tasks.Task<string> RemoveProductAsync(string uid, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveSalePurchase", ReplyAction="http://tempuri.org/IStockService/RemoveSalePurchaseResponse")]
        string RemoveSalePurchase(string uid, string type, string id, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveSalePurchase", ReplyAction="http://tempuri.org/IStockService/RemoveSalePurchaseResponse")]
        System.Threading.Tasks.Task<string> RemoveSalePurchaseAsync(string uid, string type, string id, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveStock", ReplyAction="http://tempuri.org/IStockService/RemoveStockResponse")]
        string RemoveStock(string uid, string id, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RemoveStock", ReplyAction="http://tempuri.org/IStockService/RemoveStockResponse")]
        System.Threading.Tasks.Task<string> RemoveStockAsync(string uid, string id, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateProduct", ReplyAction="http://tempuri.org/IStockService/UpdateProductResponse")]
        string UpdateProduct(string uid, string id, string name, string buyUnitPrice, string sellUnitPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateProduct", ReplyAction="http://tempuri.org/IStockService/UpdateProductResponse")]
        System.Threading.Tasks.Task<string> UpdateProductAsync(string uid, string id, string name, string buyUnitPrice, string sellUnitPrice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateSalePurchase", ReplyAction="http://tempuri.org/IStockService/UpdateSalePurchaseResponse")]
        string UpdateSalePurchase(string uid, string id, string type, string product, string quantity, string totalPrice, string date, string location, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateSalePurchase", ReplyAction="http://tempuri.org/IStockService/UpdateSalePurchaseResponse")]
        System.Threading.Tasks.Task<string> UpdateSalePurchaseAsync(string uid, string id, string type, string product, string quantity, string totalPrice, string date, string location, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateStock", ReplyAction="http://tempuri.org/IStockService/UpdateStockResponse")]
        string UpdateStock(string uid, string id, string product, string quantity, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/UpdateStock", ReplyAction="http://tempuri.org/IStockService/UpdateStockResponse")]
        System.Threading.Tasks.Task<string> UpdateStockAsync(string uid, string id, string product, string quantity, string location);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockServiceChannel : FrontendWPFTests.StockService.IStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockServiceClient : System.ServiceModel.ClientBase<FrontendWPFTests.StockService.IStockService>, FrontendWPFTests.StockService.IStockService {
        
        public StockServiceClient() {
        }
        
        public StockServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddProduct(string uid, string name, string buyUnitPrice, string sellUnitPrice) {
            return base.Channel.AddProduct(uid, name, buyUnitPrice, sellUnitPrice);
        }
        
        public System.Threading.Tasks.Task<string> AddProductAsync(string uid, string name, string buyUnitPrice, string sellUnitPrice) {
            return base.Channel.AddProductAsync(uid, name, buyUnitPrice, sellUnitPrice);
        }
        
        public string AddSalePurchase(string uid, string type, string product, string quantity, string location, string totalPrice, string date) {
            return base.Channel.AddSalePurchase(uid, type, product, quantity, location, totalPrice, date);
        }
        
        public System.Threading.Tasks.Task<string> AddSalePurchaseAsync(string uid, string type, string product, string quantity, string location, string totalPrice, string date) {
            return base.Channel.AddSalePurchaseAsync(uid, type, product, quantity, location, totalPrice, date);
        }
        
        public string AddStock(string uid, string product, string location) {
            return base.Channel.AddStock(uid, product, location);
        }
        
        public System.Threading.Tasks.Task<string> AddStockAsync(string uid, string product, string location) {
            return base.Channel.AddStockAsync(uid, product, location);
        }
        
        public FrontendWPF.StockService.Response_Product ListProduct(string uid, string id, string name, string buyOver, string buyUnder, string sellOver, string sellUnder, string limit) {
            return base.Channel.ListProduct(uid, id, name, buyOver, buyUnder, sellOver, sellUnder, limit);
        }
        
        public System.Threading.Tasks.Task<FrontendWPF.StockService.Response_Product> ListProductAsync(string uid, string id, string name, string buyOver, string buyUnder, string sellOver, string sellUnder, string limit) {
            return base.Channel.ListProductAsync(uid, id, name, buyOver, buyUnder, sellOver, sellUnder, limit);
        }
        
        public FrontendWPF.StockService.Response_SalePurchase ListSalePurchase(string uid, string type, string id, string product, string quantityOver, string quantityUnder, string priceOver, string priceUnder, string before, string after, string location, string username, string limit) {
            return base.Channel.ListSalePurchase(uid, type, id, product, quantityOver, quantityUnder, priceOver, priceUnder, before, after, location, username, limit);
        }
        
        public System.Threading.Tasks.Task<FrontendWPF.StockService.Response_SalePurchase> ListSalePurchaseAsync(string uid, string type, string id, string product, string quantityOver, string quantityUnder, string priceOver, string priceUnder, string before, string after, string location, string username, string limit) {
            return base.Channel.ListSalePurchaseAsync(uid, type, id, product, quantityOver, quantityUnder, priceOver, priceUnder, before, after, location, username, limit);
        }
        
        public FrontendWPF.StockService.Response_Stock ListStock(string uid, string id, string product, string location, string quantityOver, string quantityUnder, string limit) {
            return base.Channel.ListStock(uid, id, product, location, quantityOver, quantityUnder, limit);
        }
        
        public System.Threading.Tasks.Task<FrontendWPF.StockService.Response_Stock> ListStockAsync(string uid, string id, string product, string location, string quantityOver, string quantityUnder, string limit) {
            return base.Channel.ListStockAsync(uid, id, product, location, quantityOver, quantityUnder, limit);
        }
        
        public string RemoveProduct(string uid, string id) {
            return base.Channel.RemoveProduct(uid, id);
        }
        
        public System.Threading.Tasks.Task<string> RemoveProductAsync(string uid, string id) {
            return base.Channel.RemoveProductAsync(uid, id);
        }
        
        public string RemoveSalePurchase(string uid, string type, string id, string location) {
            return base.Channel.RemoveSalePurchase(uid, type, id, location);
        }
        
        public System.Threading.Tasks.Task<string> RemoveSalePurchaseAsync(string uid, string type, string id, string location) {
            return base.Channel.RemoveSalePurchaseAsync(uid, type, id, location);
        }
        
        public string RemoveStock(string uid, string id, string location) {
            return base.Channel.RemoveStock(uid, id, location);
        }
        
        public System.Threading.Tasks.Task<string> RemoveStockAsync(string uid, string id, string location) {
            return base.Channel.RemoveStockAsync(uid, id, location);
        }
        
        public string UpdateProduct(string uid, string id, string name, string buyUnitPrice, string sellUnitPrice) {
            return base.Channel.UpdateProduct(uid, id, name, buyUnitPrice, sellUnitPrice);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductAsync(string uid, string id, string name, string buyUnitPrice, string sellUnitPrice) {
            return base.Channel.UpdateProductAsync(uid, id, name, buyUnitPrice, sellUnitPrice);
        }
        
        public string UpdateSalePurchase(string uid, string id, string type, string product, string quantity, string totalPrice, string date, string location, string username) {
            return base.Channel.UpdateSalePurchase(uid, id, type, product, quantity, totalPrice, date, location, username);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSalePurchaseAsync(string uid, string id, string type, string product, string quantity, string totalPrice, string date, string location, string username) {
            return base.Channel.UpdateSalePurchaseAsync(uid, id, type, product, quantity, totalPrice, date, location, username);
        }
        
        public string UpdateStock(string uid, string id, string product, string quantity, string location) {
            return base.Channel.UpdateStock(uid, id, product, quantity, location);
        }
        
        public System.Threading.Tasks.Task<string> UpdateStockAsync(string uid, string id, string product, string quantity, string location) {
            return base.Channel.UpdateStockAsync(uid, id, product, quantity, location);
        }
    }
}
